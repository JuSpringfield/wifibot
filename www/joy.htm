<html>
   <head>
   	  <title>Wifibot</title>
      <meta content="text/html; charset=UTF-8" http-equiv="content-type">
      <meta name="viewport" content="width=device-width, user-scalable=no, minimum-scale=1.0, maximum-scale=1.0">
      <style>
         body
         {
	         overflow	: hidden; 
	         color: white;
	         padding		: 0;
	         margin		: 0;
	         background-color: black;
         }
         #info {
	         position	: absolute;
	         top		: 0px;
	         /*width		: 100%;*/
	         text-align	: center;
         }
         #container {
	         width		: 100%;
	         height		: 100%;
	         position   : relative;
	         z-index    : 20;
         }
         #dashboard
         {
         	white-space: nowrap;
         	padding-top: 20px;
         	width: 808px;
         	background-color: #8c8c8c;
         	border-radius: 250px;
         	padding-bottom: 20px;
         	padding-left: 20px;
         	padding-right: 20px;
         	border: 3px solid #666;
			position: fixed;
			margin-top: -50px;
			left: 50%;
			margin-left: -427px;
         }
      </style>
   </head>
   <body>
      <div id="container"></div>
      <div id="info" style="margin-top: 50px">
         <img id="stream" src="/?action=stream" style="border: 3px solid #7b7b7b; width: 900px; height: 675px;"/><br />
         <div id="dashboard">
            <canvas id="gauge1" width="200" height="200" data-type="canv-gauge"
               data-title="X" data-min-value="-220" data-max-value="220" data-major-ticks="-220 0 220"
               data-minor-ticks="2" data-stroke-ticks="true" data-units="pxls" data-value-format="3.0"
               data-glow="true" data-animation-delay="10" data-animation-duration="200"
               data-animation-fn="bounce" data-colors-needle="#f00 #00f"></canvas>
            <canvas id="mycanvas" width="400" height="200"></canvas>
            <canvas id="gauge2" width="200" height="200" data-type="canv-gauge"
               data-title="Y" data-min-value="-220" data-max-value="220" data-major-ticks="-220 0 220"
               data-minor-ticks="2" data-stroke-ticks="true" data-units="pxls" data-value-format="3.0"
               data-glow="true" data-animation-delay="10" data-animation-duration="200"
               data-animation-fn="bounce" data-colors-needle="#f00 #00f"></canvas>
         </div>
         <canvas  style="display: none;" id="gauge"></canvas>
         <p><br>
            Touch the screen and move 
            <span id="result"><b>Result:</b> dx:0 dy:0</span>
         </p>
      </div>
	  <script src="jquery.min.js"></script>
	  <script src="sprintf.js"></script>
	  <script src="virtualjoystick.js"></script>
	  <script src="gauge.min.js"></script> 
      <script type="text/javascript" src="smoothie.js"></script>
      <script>

		var ttl_x_virtual = 0;
		var ttl_x_physical = 0;
		var ttl_y_virtual = 0;
		var ttl_y_physical = 0;


		var haveEvents = 'GamepadEvent' in window;
		var haveWebkitEvents = 'WebKitGamepadEvent' in window;
		var controllers = {};
		var rAF = window.mozRequestAnimationFrame ||
		  window.webkitRequestAnimationFrame ||
		  window.requestAnimationFrame;
		function connecthandler(e) {
		  addgamepad(e.gamepad);
		  is_gamepad_enabled = true;
		}
		function addgamepad(gamepad) {
		  controllers[gamepad.index] = gamepad; 
		  rAF(updateStatus);
		}

		function disconnecthandler(e) {
		  removegamepad(e.gamepad);
		  is_gamepad_enabled = false;
		}

		function removegamepad(gamepad) {
		  delete controllers[gamepad.index];
		}

		function updateStatus() {
		  scangamepads();
		  var controller = controllers[0];
		  //console.log(controller.axes[0].toFixed(4) + " "+ controller.axes[1].toFixed(4));
		  //Gauge.Collection.get('gauge1').setValue(220 * controller.axes[0].toFixed(4));
		  ttl_x_physical = 220 * controller.axes[0].toFixed(4);
		  ttl_y_physical = 220 * controller.axes[1].toFixed(4);
		  //Gauge.Collection.get('gauge2').setValue(220 * controller.axes[1].toFixed(4));
			//smoothie_line[0].append(new Date().getTime(), 220 * controller.axes[0].toFixed(4));
			//smoothie_line[1].append(new Date().getTime(), 220 * controller.axes[1].toFixed(4));
		  rAF(updateStatus);
		}

		function scangamepads() {
		  var gamepads = navigator.getGamepads ? navigator.getGamepads() : (navigator.webkitGetGamepads ? navigator.webkitGetGamepads() : []);
		  for (var i = 0; i < gamepads.length; i++) {
		    if (gamepads[i]) {
		      if (!(gamepads[i].index in controllers)) {
		        addgamepad(gamepads[i]);
		      } else {
		        controllers[gamepads[i].index] = gamepads[i];
		      }
		    }
		  }
		}

		if (haveEvents) {
		  window.addEventListener("gamepadconnected", connecthandler);
		  window.addEventListener("gamepaddisconnected", disconnecthandler);
		} else if (haveWebkitEvents) {
		  window.addEventListener("webkitgamepadconnected", connecthandler);
		  window.addEventListener("webkitgamepaddisconnected", disconnecthandler);
		} else {
		  setInterval(scangamepads, 500);
		}




    	/*
		** Responsive
    	*/
     	var do_responsive = function ()
     	{
			var win = $(this);
			var val_of_scale = win.width() / 900;
			var val_of_margin_left_less = -((900 - win.width()) / 2 + 3);
			var val_of_margin_left_more = (win.width() - 900) / 2 - 3;
			var val_of_margin_top = 50 - (675 - (win.width() / (4 / 3))) / 2;
			if (win.width() < 900) {
				console.log($("#stream").width()+" "+$("#stream").height());
				$("#info").css("-moz-transform", "scale("+val_of_scale+")");
				$("#info").css("margin-left", val_of_margin_left_less);
				$("#info").css("margin-top", val_of_margin_top + "px");
			}
			else
			{
				$("#info").css("-moz-transform", "scale(1)");
				$("#info").css("margin-left", val_of_margin_left_more);
				$("#info").css("margin-top", "50px");
			}
     	}
		$(window).on('resize', function(){
			do_responsive();
		});

		var conok = 0;
		var output = document.getElementById("container");

		/*
		** Smoothie Init
		*/
		var smoothie = new SmoothieChart();
		var smoothie_line = new Array();
		smoothie_line.push(new TimeSeries());
		smoothie_line.push(new TimeSeries());

		/*
		** Joystick Init
		*/
		var joystick = new VirtualJoystick({
			container: document.getElementById('container'),
			mouseSupport: true
		});

		var gauge = new Gauge({
			renderTo: 'gauge',
			width: 100,
			height: 100,
			glow: true,
			units: 'Km/h',
			title: false,
			minValue: 0,
			maxValue: 220,
			majorTicks: ['0', '20', '40', '60', '80', '100', '120', '140', '160', '180', '200', '220'],
			minorTicks: 2,
			strokeTicks: false,
			highlights: [{
				from: 0,
				to: 50,
				color: 'rgba(0,   255, 0, .15)'
			}, {
				from: 50,
				to: 100,
				color: 'rgba(255, 255, 0, .15)'
			}, {
				from: 100,
				to: 150,
				color: 'rgba(255, 30,  0, .25)'
			}, {
				from: 150,
				to: 200,
				color: 'rgba(255, 0,  225, .25)'
			}, {
				from: 200,
				to: 220,
				color: 'rgba(0, 0,  255, .25)'
			}],
			colors: {
				plate: '#222',
				majorTicks: '#f5f5f5',
				minorTicks: '#ddd',
				title: '#fff',
				units: '#ccc',
				numbers: '#eee',
				needle: {
					start: 'rgba(240, 128, 128, 1)',
					end: 'rgba(255, 160, 122, .9)'
				}
			}
		});



		function initWebSocket() {

			//window.WebSocket = window.WebSocket || window.MozWebSocket;
			websocket = new WebSocket('ws://192.168.11.13:7681');
			websocket.binaryType = 'arraybuffer';
			//websocket.onopen = function() {  
			//console.log("Socket has been opened!");  
			//conok=1;

			//websocket = new WebSocket(wsUri);
			//websocket.binaryType = 'arraybuffer';
			websocket.onopen = function(evt) {
				onOpen(evt)
			};
			websocket.onclose = function(evt) {
				onClose(evt)
			};
			websocket.onmessage = function(evt) {
				onMessage(evt)
			};
			websocket.onerror = function(evt) {
				onError(evt)
			};



		}

		function writeToScreen(message) {
			var pre = document.createElement("container");
			pre.style.wordWrap = "break-word";
			pre.innerHTML = message;
			output.appendChild(pre);
		}

		function onOpen(evt) {
			writeToScreen("CONNECTED");
			conok = 1;
		}

		function onClose(evt) {
			writeToScreen("DISCONNECTED");
			conok = 0;
			//	initWebSocket();

		}

		function onMessage(evt) {
			//writeToScreen('<span style="color: blue;">RESPONSE: ' + evt.data+'</span>');
			//writeToScreen('<span style="color: blue;">Bin: ' + evt.data+'</span>');

			var data = evt.data;
			var dv = new DataView(data);
			console.log(dv);
			/*var width = dv.getInt32(0);
			var height = dv.getInt32(4);*/
			var format = 0; //getPixelFormat(dv);
			var len = 0; //dv.getUint32(20);
			//writeToScreen('<span style="color: blue;">Bin: ' + width+'</span>');
			//writeToScreen('<span style="color: blue;">Bin: ' + height+'</span>');

			console.log('We have width: ' + width +
				'px, height: ' +
				height + 'px, name length: ' + len);
			//websocket.send(arr);
			//websocket.close();
		}

		function onError(evt) {
			writeToScreen('<span style="color: red;">ERROR:</span> ' + evt.data);
		}

		function doSend(message) {}

		setTimeout(function() {
			do_responsive();
			initWebSocket();
			showGauge();

		}, 1000);

		//		console.log("touchscreen is", VirtualJoystick.touchScreenAvailable() ? "available" : "not available");



		setInterval(function() {
			//console.log('coucou');

			var mybuf = sprintf("%s %s", joystick.deltaX(), joystick.deltaY());



			if (conok == 1) {
				arr = new ArrayBuffer(8); // an Int32 takes 4 bytes
				view = new DataView(arr);
				//	view.setInt16(0, -12, false); // byteOffset = 0; litteEndian = false
				//	view.setInt16(2, -489, false); // byteOffset = 0; litteEndian = false
				view.setInt16(0, ttl_x_virtual + ttl_x_physical, false); // byteOffset = 0; litteEndian = false
				view.setInt16(2, ttl_y_virtual + ttl_y_physical, false); // byteOffset = 0; litteEndian = false
				view.setInt16(4, ttl_x_virtual + ttl_x_physical, false); // byteOffset = 0; litteEndian = false
				view.setInt16(6, ttl_y_virtual + ttl_y_physical, false); // byteOffset = 0; litteEndian = false

				websocket.send(arr);
				//websocket.send(mybuf);
				//console.log(mybuf);
			}

			var outputEl = document.getElementById('result');
			outputEl.innerHTML = '<b>Result:</b> ' +
				' dx:' + joystick.deltaX() +
				' dy:' + joystick.deltaY() +
				(joystick.right() ? ' right' : '') +
				(joystick.up() ? ' up' : '') +
				(joystick.left() ? ' left' : '') +
				(joystick.down() ? ' down' : '');
				ttl_x_virtual = joystick.deltaX();
				ttl_y_virtual = joystick.deltaY();
				if (ttl_x_virtual + ttl_x_physical < 220 && ttl_x_virtual + ttl_x_physical > -220)
					Gauge.Collection.get('gauge1').setValue(ttl_x_virtual + ttl_x_physical);
				else if (ttl_x_virtual + ttl_x_physical >= 220)
					Gauge.Collection.get('gauge1').setValue(220);
				else
					Gauge.Collection.get('gauge1').setValue(-220);
				if (ttl_y_virtual + ttl_y_physical < 220 && ttl_y_virtual + ttl_y_physical > -220)
					Gauge.Collection.get('gauge2').setValue(ttl_y_virtual + ttl_y_physical);
				else if (ttl_y_virtual + ttl_y_physical >= 220)
					Gauge.Collection.get('gauge2').setValue(220);
				else
					Gauge.Collection.get('gauge2').setValue(-220);
				smoothie_line[0].append(new Date().getTime(), ttl_x_virtual + ttl_x_physical);
				smoothie_line[1].append(new Date().getTime(), ttl_y_virtual + ttl_y_physical);

		}, 1 / 30 * 2000);

		function showGauge() {

			gauge.onready = function() {
				setInterval(function() {
					gauge.setValue(Math.random() * 220);
				}, 1000);

			};

			gauge.draw();



			smoothie.streamTo(document.getElementById("mycanvas"));

			// Add to SmoothieChart
			smoothie.addTimeSeries(smoothie_line[0], { strokeStyle: 'rgba(255, 0, 0, 1)',   lineWidth: 2 });
			smoothie.addTimeSeries(smoothie_line[1], { strokeStyle: 'rgba(0, 255, 0, 1)',   lineWidth: 2 });
		};
      </script>
   </body>
</html>